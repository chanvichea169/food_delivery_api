package com.vicheaCoder.food_delivery_api.service.handler;import com.vicheaCoder.food_delivery_api.constant.Constant;import com.vicheaCoder.food_delivery_api.dto.PaymentRequest;import com.vicheaCoder.food_delivery_api.enumeration.PaymentMethod;import com.vicheaCoder.food_delivery_api.enumeration.PaymentStatus;import com.vicheaCoder.food_delivery_api.model.Payment;import com.vicheaCoder.food_delivery_api.respository.PaymentRepository;import lombok.extern.slf4j.Slf4j;import org.springframework.stereotype.Service;import org.springframework.util.StringUtils;import java.util.Date;@Service@Slf4jpublic class PaymentHandlerService {    private final PaymentRepository paymentRepository;    private final KhQRHandlerService khQRHandlerService;    private final CashHandlerService cashHandlerService;    public PaymentHandlerService(PaymentRepository paymentRepository,                                 KhQRHandlerService khQRHandlerService,                                 CashHandlerService cashHandlerService) {        this.paymentRepository = paymentRepository;        this.khQRHandlerService = khQRHandlerService;        this.cashHandlerService = cashHandlerService;    }    public String postingToPaymentGateway(PaymentRequest paymentRequest) {        log.info("Posting to payment gateway with request: {}", paymentRequest);        String method = paymentRequest.getPaymentMethod();        String orderId = paymentRequest.getOrderId();        if (Constant.BANK.equalsIgnoreCase(method)) {            log.info("Processing bank transfer for order: {}", orderId);            String khQRServiceResponse = khQRHandlerService.postToKhQRApi(paymentRequest);            log.info("KhQR service response: {}", khQRServiceResponse);            savePaymentTransaction(paymentRequest, khQRServiceResponse);            if (StringUtils.hasText(khQRServiceResponse)) {                return Constant.SUCCESS;            }            return Constant.FAILED;        }        if (Constant.CASH.equalsIgnoreCase(method)) {            log.info("Processing cash payment for order: {}", orderId);            //call api            String cashServiceResponse = cashHandlerService.postToCashApi(paymentRequest);            if (cashServiceResponse == null || cashServiceResponse.isEmpty()) {                log.error("Cash service response is empty for order: {}", orderId);                throw new RuntimeException("Cash service response is empty for order: " + orderId);            }            else {                log.info("Cash service response: {}", cashServiceResponse);                savePaymentTransaction(paymentRequest, cashServiceResponse);            }            //core system logic for cash payment            //business logic implementation here            if (StringUtils.hasText(cashServiceResponse)) {                return Constant.SUCCESS;            }            return Constant.FAILED;        }        if (Constant.CARD.equalsIgnoreCase(method)) {            log.info("Processing card payment for order: {}", orderId);            return Constant.SUCCESS;        }        log.error("Unsupported payment method: {}", method);        return Constant.FAILED;    }    public void savePaymentTransaction(PaymentRequest paymentRequest, String response) {        Payment payment = new Payment();        payment.setPaymentMethod(PaymentMethod.valueOf(paymentRequest.getPaymentMethod()));        if (StringUtils.hasText(response)) {            payment.setPaymentStatus(PaymentStatus.SUCCESS);        } else {            payment.setPaymentStatus(PaymentStatus.FAILED);        }        payment.setAmount(paymentRequest.getAmount());        payment.setOrderId(Long.valueOf(paymentRequest.getOrderId()));        payment.setCreatedAt(new Date());        payment.setCreatedBy(Constant.SYSTEM_USER);        log.info("Saving payment transaction: {}", payment);        Payment savedPayment = paymentRepository.save(payment);    }}